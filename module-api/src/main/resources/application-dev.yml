
# DB 종류
profile: dev

spring:
  config:
    import: aws-parameterstore:/parameter/api/dev/
  h2:
    console:
      enabled: false
      path: /h2-console
  datasource:
    url: jdbc:mysql://develop.c5aa8aa4iy5s.ap-northeast-2.rds.amazonaws.com:3306/innergrim
    username: ${datasource.username}
    password: ${datasource.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 5                      # 최소 유지할 커넥션 수
      maximum-pool-size: 10                # 최대 커넥션 수
      idle-timeout: 600000                 # 커넥션이 사용되지 않을 경우 대기 시간 (밀리초)
      max-lifetime: 1800000                # 커넥션의 최대 수명 (밀리초)
      connection-timeout: 30000            # 커넥션 풀에서 커넥션을 얻기까지의 최대 대기 시간 (밀리초)
      pool-name: HikariCP                  # 커넥션 풀의 이름
      connection-test-query: SELECT 1      # 커넥션을 확인할 때 사용할 쿼리 (MySQL 기준)
  sql:
    # DB초기화(schema.sql, data.sql) , [always : 기동 시 매번 동작, never : 기동 시 동작하지 않음]
    init:
      schema-locations: classpath*:initdata/${profile}/schema.sql
      data-locations: classpath*:initdata/${profile}/data.sql
      #schema-locations: classpath*:initdata/h2db/schema.sql
      #data-locations: classpath*:initdata/h2db/data.sql
      mode: always
  jpa:
    #jpa 사용 환경에서 data.sql을 정상적으로 동작하게 하는 옵션
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: none
    show-sql: true
    format-sql: true
  redis:
    host: develop.jmpeec.ng.0001.apn2.cache.amazonaws.com
    port: 6379
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB

aws:
  s3:
    image-url: https://dev-innergrim.s3.ap-northeast-2.amazonaws.com
    bucket: dev-innergrim

chatbot:
  base-url: http://innergrim-chatbot:8000